name: Deploy to Production

on: workflow_dispatch

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Navigate to app directory
            cd bingoscape
            
            # Create docker-compose.prod.yml from template
            cat > docker-compose.prod.yml << 'EOL'
            version: '3.8'

            services:
              app:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
                ports:
                  - "3333:3333"
                env_file:
                  - .env
                environment:
                  - NODE_ENV=production
                depends_on:
                  - db
                restart: unless-stopped
                volumes:
                  - ${UPLOADS_PATH:-./uploads}:/app/public/uploads

              db:
                image: postgres:16-alpine
                container_name: bingoscape-next-postgres
                ports:
                  - "5555:5432"
                environment:
                  - POSTGRES_USER=postgres
                  - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
                  - POSTGRES_DB=bingoscape-next
                volumes:
                  - ${POSTGRES_PATH:-./data/postgres}:/var/lib/postgresql/data
                restart: unless-stopped
            EOL
            
            # Pull the latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
            
            # Stop existing containers
            docker-compose -f docker-compose.prod.yml down
            
            # Ensure runtime .env file exists
            if [ ! -f .env ]; then
              echo "Error: Runtime .env file not found on server"
              echo "Please ensure .env file exists with production values"
              exit 1
            fi
            
            # Start with new image and runtime .env file
            docker-compose -f docker-compose.prod.yml --env-file .env up -d
            
            # Verify containers are running
            docker-compose -f docker-compose.prod.yml ps 